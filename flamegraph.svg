<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="213"><g><title>[psx-rs] (1 samples, 0.47%)</title><rect x="0.0000%" y="597" width="0.4695%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>iset::bitvec::BitVec::push (1 samples, 0.47%)</title><rect x="0.0000%" y="581" width="0.4695%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 2.82%)</title><rect x="0.4695%" y="581" width="2.8169%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="6"/><text x="0.7195%" y="591.50">&lt;i..</text></g><g><title>iset::iter::move_to_next (1 samples, 0.47%)</title><rect x="2.8169%" y="565" width="0.4695%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="3.0669%" y="575.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="2.8169%" y="549" width="0.4695%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="3.0669%" y="559.50"></text></g><g><title>_int_malloc (1 samples, 0.47%)</title><rect x="3.2864%" y="581" width="0.4695%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="3.5364%" y="591.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.47%)</title><rect x="3.7559%" y="581" width="0.4695%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="4.0059%" y="591.50"></text></g><g><title>iset::bitvec::BitVec::push (1 samples, 0.47%)</title><rect x="4.2254%" y="581" width="0.4695%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="1"/><text x="4.4754%" y="591.50"></text></g><g><title>psx_rs::emu::Psx::load (3 samples, 1.41%)</title><rect x="4.6948%" y="581" width="1.4085%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="3"/><text x="4.9448%" y="591.50"></text></g><g><title>psx_rs::emu::Psx::store (1 samples, 0.47%)</title><rect x="6.1033%" y="581" width="0.4695%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="1"/><text x="6.3533%" y="591.50"></text></g><g><title>psx_rs::emu::bios::Bios::load (3 samples, 1.41%)</title><rect x="6.5728%" y="581" width="1.4085%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="3"/><text x="6.8228%" y="591.50"></text></g><g><title>[unknown] (24 samples, 11.27%)</title><rect x="0.4695%" y="597" width="11.2676%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="24"/><text x="0.7195%" y="607.50">[unknown]</text></g><g><title>psx_rs::emu::map::get_region (8 samples, 3.76%)</title><rect x="7.9812%" y="581" width="3.7559%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="8"/><text x="8.2312%" y="591.50">psx_..</text></g><g><title>__libc_calloc (2 samples, 0.94%)</title><rect x="11.7371%" y="597" width="0.9390%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="2"/><text x="11.9871%" y="607.50"></text></g><g><title>_int_malloc (2 samples, 0.94%)</title><rect x="12.6761%" y="597" width="0.9390%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="2"/><text x="12.9261%" y="607.50"></text></g><g><title>log::max_level (1 samples, 0.47%)</title><rect x="18.7793%" y="309" width="0.4695%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="1"/><text x="19.0293%" y="319.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="18.7793%" y="293" width="0.4695%" height="15" fill="rgb(225,20,46)" fg:x="40" fg:w="1"/><text x="19.0293%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.47%)</title><rect x="18.7793%" y="277" width="0.4695%" height="15" fill="rgb(210,31,41)" fg:x="40" fg:w="1"/><text x="19.0293%" y="287.50"></text></g><g><title>psx_rs::emu::bios::Bios::load (1 samples, 0.47%)</title><rect x="19.2488%" y="309" width="0.4695%" height="15" fill="rgb(221,200,47)" fg:x="41" fg:w="1"/><text x="19.4988%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.47%)</title><rect x="19.2488%" y="293" width="0.4695%" height="15" fill="rgb(226,26,5)" fg:x="41" fg:w="1"/><text x="19.4988%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.47%)</title><rect x="19.2488%" y="277" width="0.4695%" height="15" fill="rgb(249,33,26)" fg:x="41" fg:w="1"/><text x="19.4988%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.47%)</title><rect x="19.2488%" y="261" width="0.4695%" height="15" fill="rgb(235,183,28)" fg:x="41" fg:w="1"/><text x="19.4988%" y="271.50"></text></g><g><title>?? (2 samples, 0.94%)</title><rect x="31.4554%" y="229" width="0.9390%" height="15" fill="rgb(221,5,38)" fg:x="67" fg:w="2"/><text x="31.7054%" y="239.50"></text></g><g><title>iset::bitvec::BitVec::push (2 samples, 0.94%)</title><rect x="31.4554%" y="213" width="0.9390%" height="15" fill="rgb(247,18,42)" fg:x="67" fg:w="2"/><text x="31.7054%" y="223.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 6.57%)</title><rect x="27.6995%" y="261" width="6.5728%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="14"/><text x="27.9495%" y="271.50">&lt;iset::it..</text></g><g><title>iset::bitvec::BitVec::push (10 samples, 4.69%)</title><rect x="29.5775%" y="245" width="4.6948%" height="15" fill="rgb(249,31,29)" fg:x="63" fg:w="10"/><text x="29.8275%" y="255.50">iset:..</text></g><g><title>iset::bitvec::BitVec::push (4 samples, 1.88%)</title><rect x="32.3944%" y="229" width="1.8779%" height="15" fill="rgb(225,111,53)" fg:x="69" fg:w="4"/><text x="32.6444%" y="239.50">i..</text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 8.92%)</title><rect x="34.2723%" y="245" width="8.9202%" height="15" fill="rgb(238,160,17)" fg:x="73" fg:w="19"/><text x="34.5223%" y="255.50">&lt;iset::iter::..</text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 4.23%)</title><rect x="43.1925%" y="229" width="4.2254%" height="15" fill="rgb(214,148,48)" fg:x="92" fg:w="9"/><text x="43.4425%" y="239.50">&lt;iset..</text></g><g><title>?? (12 samples, 5.63%)</title><rect x="43.1925%" y="245" width="5.6338%" height="15" fill="rgb(232,36,49)" fg:x="92" fg:w="12"/><text x="43.4425%" y="255.50">??</text></g><g><title>?? (3 samples, 1.41%)</title><rect x="47.4178%" y="229" width="1.4085%" height="15" fill="rgb(209,103,24)" fg:x="101" fg:w="3"/><text x="47.6678%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 1.41%)</title><rect x="47.4178%" y="213" width="1.4085%" height="15" fill="rgb(229,88,8)" fg:x="101" fg:w="3"/><text x="47.6678%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 1.41%)</title><rect x="47.4178%" y="197" width="1.4085%" height="15" fill="rgb(213,181,19)" fg:x="101" fg:w="3"/><text x="47.6678%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 1.41%)</title><rect x="47.4178%" y="181" width="1.4085%" height="15" fill="rgb(254,191,54)" fg:x="101" fg:w="3"/><text x="47.6678%" y="191.50"></text></g><g><title>?? (32 samples, 15.02%)</title><rect x="34.2723%" y="261" width="15.0235%" height="15" fill="rgb(241,83,37)" fg:x="73" fg:w="32"/><text x="34.5223%" y="271.50">??</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::le (1 samples, 0.47%)</title><rect x="48.8263%" y="245" width="0.4695%" height="15" fill="rgb(233,36,39)" fg:x="104" fg:w="1"/><text x="49.0763%" y="255.50"></text></g><g><title>iset::iter::should_go_left (3 samples, 1.41%)</title><rect x="49.2958%" y="261" width="1.4085%" height="15" fill="rgb(226,3,54)" fg:x="105" fg:w="3"/><text x="49.5458%" y="271.50"></text></g><g><title>&lt;u32 as iset::ix::IndexType&gt;::get (2 samples, 0.94%)</title><rect x="49.7653%" y="245" width="0.9390%" height="15" fill="rgb(245,192,40)" fg:x="106" fg:w="2"/><text x="50.0153%" y="255.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 26.29%)</title><rect x="25.3521%" y="293" width="26.2911%" height="15" fill="rgb(238,167,29)" fg:x="54" fg:w="56"/><text x="25.6021%" y="303.50">&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter:..</text></g><g><title>iset::iter::move_to_next (53 samples, 24.88%)</title><rect x="26.7606%" y="277" width="24.8826%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="53"/><text x="27.0106%" y="287.50">iset::iter::move_to_next</text></g><g><title>iset::iter::should_go_right (2 samples, 0.94%)</title><rect x="50.7042%" y="261" width="0.9390%" height="15" fill="rgb(231,60,39)" fg:x="108" fg:w="2"/><text x="50.9542%" y="271.50"></text></g><g><title>__GI___libc_free (7 samples, 3.29%)</title><rect x="51.6432%" y="293" width="3.2864%" height="15" fill="rgb(208,69,12)" fg:x="110" fg:w="7"/><text x="51.8932%" y="303.50">__G..</text></g><g><title>_int_free (4 samples, 1.88%)</title><rect x="54.9296%" y="293" width="1.8779%" height="15" fill="rgb(235,93,37)" fg:x="117" fg:w="4"/><text x="55.1796%" y="303.50">_..</text></g><g><title>__libc_calloc (21 samples, 9.86%)</title><rect x="58.6854%" y="149" width="9.8592%" height="15" fill="rgb(213,116,39)" fg:x="125" fg:w="21"/><text x="58.9354%" y="159.50">__libc_calloc</text></g><g><title>_int_malloc (12 samples, 5.63%)</title><rect x="62.9108%" y="133" width="5.6338%" height="15" fill="rgb(222,207,29)" fg:x="134" fg:w="12"/><text x="63.1608%" y="143.50">_int_ma..</text></g><g><title>_int_malloc (1 samples, 0.47%)</title><rect x="68.0751%" y="117" width="0.4695%" height="15" fill="rgb(206,96,30)" fg:x="145" fg:w="1"/><text x="68.3251%" y="127.50"></text></g><g><title>psx_rs::emu::map::get_region (105 samples, 49.30%)</title><rect x="19.7183%" y="309" width="49.2958%" height="15" fill="rgb(218,138,4)" fg:x="42" fg:w="105"/><text x="19.9683%" y="319.50">psx_rs::emu::map::get_region</text></g><g><title>iset::iter::ActionStack::new (26 samples, 12.21%)</title><rect x="56.8075%" y="293" width="12.2066%" height="15" fill="rgb(250,191,14)" fg:x="121" fg:w="26"/><text x="57.0575%" y="303.50">iset::iter::Action..</text></g><g><title>?? (22 samples, 10.33%)</title><rect x="58.6854%" y="277" width="10.3286%" height="15" fill="rgb(239,60,40)" fg:x="125" fg:w="22"/><text x="58.9354%" y="287.50">??</text></g><g><title>alloc::vec::from_elem (22 samples, 10.33%)</title><rect x="58.6854%" y="261" width="10.3286%" height="15" fill="rgb(206,27,48)" fg:x="125" fg:w="22"/><text x="58.9354%" y="271.50">alloc::vec::fro..</text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (22 samples, 10.33%)</title><rect x="58.6854%" y="245" width="10.3286%" height="15" fill="rgb(225,35,8)" fg:x="125" fg:w="22"/><text x="58.9354%" y="255.50">&lt;u8 as alloc::v..</text></g><g><title>?? (22 samples, 10.33%)</title><rect x="58.6854%" y="229" width="10.3286%" height="15" fill="rgb(250,213,24)" fg:x="125" fg:w="22"/><text x="58.9354%" y="239.50">??</text></g><g><title>?? (22 samples, 10.33%)</title><rect x="58.6854%" y="213" width="10.3286%" height="15" fill="rgb(247,123,22)" fg:x="125" fg:w="22"/><text x="58.9354%" y="223.50">??</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (22 samples, 10.33%)</title><rect x="58.6854%" y="197" width="10.3286%" height="15" fill="rgb(231,138,38)" fg:x="125" fg:w="22"/><text x="58.9354%" y="207.50">&lt;alloc::alloc::..</text></g><g><title>?? (22 samples, 10.33%)</title><rect x="58.6854%" y="181" width="10.3286%" height="15" fill="rgb(231,145,46)" fg:x="125" fg:w="22"/><text x="58.9354%" y="191.50">??</text></g><g><title>alloc::alloc::alloc_zeroed (22 samples, 10.33%)</title><rect x="58.6854%" y="165" width="10.3286%" height="15" fill="rgb(251,118,11)" fg:x="125" fg:w="22"/><text x="58.9354%" y="175.50">alloc::alloc::a..</text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.47%)</title><rect x="68.5446%" y="149" width="0.4695%" height="15" fill="rgb(217,147,25)" fg:x="146" fg:w="1"/><text x="68.7946%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.47%)</title><rect x="68.5446%" y="133" width="0.4695%" height="15" fill="rgb(247,81,37)" fg:x="146" fg:w="1"/><text x="68.7946%" y="143.50"></text></g><g><title>psx_rs::emu::Psx::load (111 samples, 52.11%)</title><rect x="17.3709%" y="325" width="52.1127%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="111"/><text x="17.6209%" y="335.50">psx_rs::emu::Psx::load</text></g><g><title>psx_rs::emu::map::mask_region (1 samples, 0.47%)</title><rect x="69.0141%" y="309" width="0.4695%" height="15" fill="rgb(227,1,9)" fg:x="147" fg:w="1"/><text x="69.2641%" y="319.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="70.8920%" y="261" width="0.4695%" height="15" fill="rgb(248,47,43)" fg:x="151" fg:w="1"/><text x="71.1420%" y="271.50"></text></g><g><title>iset::bitvec::BitVec::push (1 samples, 0.47%)</title><rect x="70.8920%" y="245" width="0.4695%" height="15" fill="rgb(221,10,30)" fg:x="151" fg:w="1"/><text x="71.1420%" y="255.50"></text></g><g><title>iset::bitvec::BitVec::push (1 samples, 0.47%)</title><rect x="70.8920%" y="229" width="0.4695%" height="15" fill="rgb(210,229,1)" fg:x="151" fg:w="1"/><text x="71.1420%" y="239.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.94%)</title><rect x="70.8920%" y="293" width="0.9390%" height="15" fill="rgb(222,148,37)" fg:x="151" fg:w="2"/><text x="71.1420%" y="303.50"></text></g><g><title>iset::iter::move_to_next (2 samples, 0.94%)</title><rect x="70.8920%" y="277" width="0.9390%" height="15" fill="rgb(234,67,33)" fg:x="151" fg:w="2"/><text x="71.1420%" y="287.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="71.3615%" y="261" width="0.4695%" height="15" fill="rgb(247,98,35)" fg:x="152" fg:w="1"/><text x="71.6115%" y="271.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="71.3615%" y="245" width="0.4695%" height="15" fill="rgb(247,138,52)" fg:x="152" fg:w="1"/><text x="71.6115%" y="255.50"></text></g><g><title>_int_free (3 samples, 1.41%)</title><rect x="71.8310%" y="293" width="1.4085%" height="15" fill="rgb(213,79,30)" fg:x="153" fg:w="3"/><text x="72.0810%" y="303.50"></text></g><g><title>psx_rs::emu::map::get_region (9 samples, 4.23%)</title><rect x="70.8920%" y="309" width="4.2254%" height="15" fill="rgb(246,177,23)" fg:x="151" fg:w="9"/><text x="71.1420%" y="319.50">psx_r..</text></g><g><title>iset::iter::ActionStack::new (4 samples, 1.88%)</title><rect x="73.2394%" y="293" width="1.8779%" height="15" fill="rgb(230,62,27)" fg:x="156" fg:w="4"/><text x="73.4894%" y="303.50">i..</text></g><g><title>?? (4 samples, 1.88%)</title><rect x="73.2394%" y="277" width="1.8779%" height="15" fill="rgb(216,154,8)" fg:x="156" fg:w="4"/><text x="73.4894%" y="287.50">??</text></g><g><title>alloc::vec::from_elem (4 samples, 1.88%)</title><rect x="73.2394%" y="261" width="1.8779%" height="15" fill="rgb(244,35,45)" fg:x="156" fg:w="4"/><text x="73.4894%" y="271.50">a..</text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 1.88%)</title><rect x="73.2394%" y="245" width="1.8779%" height="15" fill="rgb(251,115,12)" fg:x="156" fg:w="4"/><text x="73.4894%" y="255.50">&lt;..</text></g><g><title>?? (4 samples, 1.88%)</title><rect x="73.2394%" y="229" width="1.8779%" height="15" fill="rgb(240,54,50)" fg:x="156" fg:w="4"/><text x="73.4894%" y="239.50">??</text></g><g><title>?? (4 samples, 1.88%)</title><rect x="73.2394%" y="213" width="1.8779%" height="15" fill="rgb(233,84,52)" fg:x="156" fg:w="4"/><text x="73.4894%" y="223.50">??</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (4 samples, 1.88%)</title><rect x="73.2394%" y="197" width="1.8779%" height="15" fill="rgb(207,117,47)" fg:x="156" fg:w="4"/><text x="73.4894%" y="207.50">&lt;..</text></g><g><title>?? (4 samples, 1.88%)</title><rect x="73.2394%" y="181" width="1.8779%" height="15" fill="rgb(249,43,39)" fg:x="156" fg:w="4"/><text x="73.4894%" y="191.50">??</text></g><g><title>alloc::alloc::alloc_zeroed (4 samples, 1.88%)</title><rect x="73.2394%" y="165" width="1.8779%" height="15" fill="rgb(209,38,44)" fg:x="156" fg:w="4"/><text x="73.4894%" y="175.50">a..</text></g><g><title>__libc_calloc (4 samples, 1.88%)</title><rect x="73.2394%" y="149" width="1.8779%" height="15" fill="rgb(236,212,23)" fg:x="156" fg:w="4"/><text x="73.4894%" y="159.50">_..</text></g><g><title>_int_malloc (2 samples, 0.94%)</title><rect x="74.1784%" y="133" width="0.9390%" height="15" fill="rgb(242,79,21)" fg:x="158" fg:w="2"/><text x="74.4284%" y="143.50"></text></g><g><title>psx_rs::emu::map::mask_region (1 samples, 0.47%)</title><rect x="75.1174%" y="309" width="0.4695%" height="15" fill="rgb(211,96,35)" fg:x="160" fg:w="1"/><text x="75.3674%" y="319.50"></text></g><g><title>psx_rs::emu::Psx::store (15 samples, 7.04%)</title><rect x="69.4836%" y="325" width="7.0423%" height="15" fill="rgb(253,215,40)" fg:x="148" fg:w="15"/><text x="69.7336%" y="335.50">psx_rs::e..</text></g><g><title>psx_rs::emu::ram::Ram::store (2 samples, 0.94%)</title><rect x="75.5869%" y="309" width="0.9390%" height="15" fill="rgb(211,81,21)" fg:x="161" fg:w="2"/><text x="75.8369%" y="319.50"></text></g><g><title>psx_rs::emu::cpu::dispatch_instruction (1 samples, 0.47%)</title><rect x="76.9953%" y="309" width="0.4695%" height="15" fill="rgb(208,190,38)" fg:x="164" fg:w="1"/><text x="77.2453%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="77.4648%" y="197" width="0.4695%" height="15" fill="rgb(235,213,38)" fg:x="165" fg:w="1"/><text x="77.7148%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="77.4648%" y="181" width="0.4695%" height="15" fill="rgb(237,122,38)" fg:x="165" fg:w="1"/><text x="77.7148%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.47%)</title><rect x="77.4648%" y="165" width="0.4695%" height="15" fill="rgb(244,218,35)" fg:x="165" fg:w="1"/><text x="77.7148%" y="175.50"></text></g><g><title>psx_rs::emu::cpu::op_addi (2 samples, 0.94%)</title><rect x="77.4648%" y="309" width="0.9390%" height="15" fill="rgb(240,68,47)" fg:x="165" fg:w="2"/><text x="77.7148%" y="319.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.94%)</title><rect x="77.4648%" y="293" width="0.9390%" height="15" fill="rgb(210,16,53)" fg:x="165" fg:w="2"/><text x="77.7148%" y="303.50"></text></g><g><title>?? (2 samples, 0.94%)</title><rect x="77.4648%" y="277" width="0.9390%" height="15" fill="rgb(235,124,12)" fg:x="165" fg:w="2"/><text x="77.7148%" y="287.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (2 samples, 0.94%)</title><rect x="77.4648%" y="261" width="0.9390%" height="15" fill="rgb(224,169,11)" fg:x="165" fg:w="2"/><text x="77.7148%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.94%)</title><rect x="77.4648%" y="245" width="0.9390%" height="15" fill="rgb(250,166,2)" fg:x="165" fg:w="2"/><text x="77.7148%" y="255.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.94%)</title><rect x="77.4648%" y="229" width="0.9390%" height="15" fill="rgb(242,216,29)" fg:x="165" fg:w="2"/><text x="77.7148%" y="239.50"></text></g><g><title>core::fmt::write (2 samples, 0.94%)</title><rect x="77.4648%" y="213" width="0.9390%" height="15" fill="rgb(230,116,27)" fg:x="165" fg:w="2"/><text x="77.7148%" y="223.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.47%)</title><rect x="77.9343%" y="197" width="0.4695%" height="15" fill="rgb(228,99,48)" fg:x="166" fg:w="1"/><text x="78.1843%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.47%)</title><rect x="77.9343%" y="181" width="0.4695%" height="15" fill="rgb(253,11,6)" fg:x="166" fg:w="1"/><text x="78.1843%" y="191.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.47%)</title><rect x="77.9343%" y="165" width="0.4695%" height="15" fill="rgb(247,143,39)" fg:x="166" fg:w="1"/><text x="78.1843%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.47%)</title><rect x="77.9343%" y="149" width="0.4695%" height="15" fill="rgb(236,97,10)" fg:x="166" fg:w="1"/><text x="78.1843%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.47%)</title><rect x="77.9343%" y="133" width="0.4695%" height="15" fill="rgb(233,208,19)" fg:x="166" fg:w="1"/><text x="78.1843%" y="143.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.47%)</title><rect x="77.9343%" y="117" width="0.4695%" height="15" fill="rgb(216,164,2)" fg:x="166" fg:w="1"/><text x="78.1843%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.47%)</title><rect x="77.9343%" y="101" width="0.4695%" height="15" fill="rgb(220,129,5)" fg:x="166" fg:w="1"/><text x="78.1843%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.47%)</title><rect x="77.9343%" y="85" width="0.4695%" height="15" fill="rgb(242,17,10)" fg:x="166" fg:w="1"/><text x="78.1843%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.47%)</title><rect x="77.9343%" y="69" width="0.4695%" height="15" fill="rgb(242,107,0)" fg:x="166" fg:w="1"/><text x="78.1843%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.47%)</title><rect x="77.9343%" y="53" width="0.4695%" height="15" fill="rgb(251,28,31)" fg:x="166" fg:w="1"/><text x="78.1843%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.47%)</title><rect x="77.9343%" y="37" width="0.4695%" height="15" fill="rgb(233,223,10)" fg:x="166" fg:w="1"/><text x="78.1843%" y="47.50"></text></g><g><title>log::max_level (3 samples, 1.41%)</title><rect x="78.8732%" y="293" width="1.4085%" height="15" fill="rgb(215,21,27)" fg:x="168" fg:w="3"/><text x="79.1232%" y="303.50"></text></g><g><title>?? (3 samples, 1.41%)</title><rect x="78.8732%" y="277" width="1.4085%" height="15" fill="rgb(232,23,21)" fg:x="168" fg:w="3"/><text x="79.1232%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 1.41%)</title><rect x="78.8732%" y="261" width="1.4085%" height="15" fill="rgb(244,5,23)" fg:x="168" fg:w="3"/><text x="79.1232%" y="271.50"></text></g><g><title>psx_rs::emu::cpu::op_addiu (5 samples, 2.35%)</title><rect x="78.4038%" y="309" width="2.3474%" height="15" fill="rgb(226,81,46)" fg:x="167" fg:w="5"/><text x="78.6538%" y="319.50">p..</text></g><g><title>psx_rs::emu::cpu::dispatch_instruction (1 samples, 0.47%)</title><rect x="80.2817%" y="293" width="0.4695%" height="15" fill="rgb(247,70,30)" fg:x="171" fg:w="1"/><text x="80.5317%" y="303.50"></text></g><g><title>psx_rs::emu::cpu::op_bgtz (3 samples, 1.41%)</title><rect x="80.7512%" y="309" width="1.4085%" height="15" fill="rgb(212,68,19)" fg:x="172" fg:w="3"/><text x="81.0012%" y="319.50"></text></g><g><title>log::max_level (1 samples, 0.47%)</title><rect x="81.6901%" y="293" width="0.4695%" height="15" fill="rgb(240,187,13)" fg:x="174" fg:w="1"/><text x="81.9401%" y="303.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="81.6901%" y="277" width="0.4695%" height="15" fill="rgb(223,113,26)" fg:x="174" fg:w="1"/><text x="81.9401%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.47%)</title><rect x="81.6901%" y="261" width="0.4695%" height="15" fill="rgb(206,192,2)" fg:x="174" fg:w="1"/><text x="81.9401%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.47%)</title><rect x="82.6291%" y="293" width="0.4695%" height="15" fill="rgb(241,108,4)" fg:x="176" fg:w="1"/><text x="82.8791%" y="303.50"></text></g><g><title>log::max_level (2 samples, 0.94%)</title><rect x="83.0986%" y="293" width="0.9390%" height="15" fill="rgb(247,173,49)" fg:x="177" fg:w="2"/><text x="83.3486%" y="303.50"></text></g><g><title>?? (2 samples, 0.94%)</title><rect x="83.0986%" y="277" width="0.9390%" height="15" fill="rgb(224,114,35)" fg:x="177" fg:w="2"/><text x="83.3486%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.94%)</title><rect x="83.0986%" y="261" width="0.9390%" height="15" fill="rgb(245,159,27)" fg:x="177" fg:w="2"/><text x="83.3486%" y="271.50"></text></g><g><title>psx_rs::emu::bios::Bios::load (1 samples, 0.47%)</title><rect x="84.5070%" y="277" width="0.4695%" height="15" fill="rgb(245,172,44)" fg:x="180" fg:w="1"/><text x="84.7570%" y="287.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="87.7934%" y="229" width="0.4695%" height="15" fill="rgb(236,23,11)" fg:x="187" fg:w="1"/><text x="88.0434%" y="239.50"></text></g><g><title>iset::bitvec::BitVec::push (1 samples, 0.47%)</title><rect x="87.7934%" y="213" width="0.4695%" height="15" fill="rgb(205,117,38)" fg:x="187" fg:w="1"/><text x="88.0434%" y="223.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.94%)</title><rect x="88.2629%" y="213" width="0.9390%" height="15" fill="rgb(237,72,25)" fg:x="188" fg:w="2"/><text x="88.5129%" y="223.50"></text></g><g><title>?? (3 samples, 1.41%)</title><rect x="88.2629%" y="229" width="1.4085%" height="15" fill="rgb(244,70,9)" fg:x="188" fg:w="3"/><text x="88.5129%" y="239.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="89.2019%" y="213" width="0.4695%" height="15" fill="rgb(217,125,39)" fg:x="190" fg:w="1"/><text x="89.4519%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.47%)</title><rect x="89.2019%" y="197" width="0.4695%" height="15" fill="rgb(235,36,10)" fg:x="190" fg:w="1"/><text x="89.4519%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.47%)</title><rect x="89.2019%" y="181" width="0.4695%" height="15" fill="rgb(251,123,47)" fg:x="190" fg:w="1"/><text x="89.4519%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.47%)</title><rect x="89.2019%" y="165" width="0.4695%" height="15" fill="rgb(221,13,13)" fg:x="190" fg:w="1"/><text x="89.4519%" y="175.50"></text></g><g><title>iset::iter::should_go_left (1 samples, 0.47%)</title><rect x="89.6714%" y="229" width="0.4695%" height="15" fill="rgb(238,131,9)" fg:x="191" fg:w="1"/><text x="89.9214%" y="239.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 4.69%)</title><rect x="85.9155%" y="261" width="4.6948%" height="15" fill="rgb(211,50,8)" fg:x="183" fg:w="10"/><text x="86.1655%" y="271.50">&lt;iset..</text></g><g><title>iset::iter::move_to_next (9 samples, 4.23%)</title><rect x="86.3850%" y="245" width="4.2254%" height="15" fill="rgb(245,182,24)" fg:x="184" fg:w="9"/><text x="86.6350%" y="255.50">iset:..</text></g><g><title>iset::iter::should_go_right (1 samples, 0.47%)</title><rect x="90.1408%" y="229" width="0.4695%" height="15" fill="rgb(242,14,37)" fg:x="192" fg:w="1"/><text x="90.3908%" y="239.50"></text></g><g><title>__GI___libc_free (1 samples, 0.47%)</title><rect x="90.6103%" y="261" width="0.4695%" height="15" fill="rgb(246,228,12)" fg:x="193" fg:w="1"/><text x="90.8603%" y="271.50"></text></g><g><title>__libc_calloc (4 samples, 1.88%)</title><rect x="91.0798%" y="117" width="1.8779%" height="15" fill="rgb(213,55,15)" fg:x="194" fg:w="4"/><text x="91.3298%" y="127.50">_..</text></g><g><title>_int_malloc (3 samples, 1.41%)</title><rect x="91.5493%" y="101" width="1.4085%" height="15" fill="rgb(209,9,3)" fg:x="195" fg:w="3"/><text x="91.7993%" y="111.50"></text></g><g><title>psx_rs::emu::cpu::op_lbu (24 samples, 11.27%)</title><rect x="82.1596%" y="309" width="11.2676%" height="15" fill="rgb(230,59,30)" fg:x="175" fg:w="24"/><text x="82.4096%" y="319.50">psx_rs::emu::cpu:..</text></g><g><title>psx_rs::emu::Psx::load (20 samples, 9.39%)</title><rect x="84.0376%" y="293" width="9.3897%" height="15" fill="rgb(209,121,21)" fg:x="179" fg:w="20"/><text x="84.2876%" y="303.50">psx_rs::emu::..</text></g><g><title>psx_rs::emu::map::get_region (18 samples, 8.45%)</title><rect x="84.9765%" y="277" width="8.4507%" height="15" fill="rgb(220,109,13)" fg:x="181" fg:w="18"/><text x="85.2265%" y="287.50">psx_rs::emu:..</text></g><g><title>iset::iter::ActionStack::new (5 samples, 2.35%)</title><rect x="91.0798%" y="261" width="2.3474%" height="15" fill="rgb(232,18,1)" fg:x="194" fg:w="5"/><text x="91.3298%" y="271.50">i..</text></g><g><title>?? (5 samples, 2.35%)</title><rect x="91.0798%" y="245" width="2.3474%" height="15" fill="rgb(215,41,42)" fg:x="194" fg:w="5"/><text x="91.3298%" y="255.50">??</text></g><g><title>alloc::vec::from_elem (5 samples, 2.35%)</title><rect x="91.0798%" y="229" width="2.3474%" height="15" fill="rgb(224,123,36)" fg:x="194" fg:w="5"/><text x="91.3298%" y="239.50">a..</text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 2.35%)</title><rect x="91.0798%" y="213" width="2.3474%" height="15" fill="rgb(240,125,3)" fg:x="194" fg:w="5"/><text x="91.3298%" y="223.50">&lt;..</text></g><g><title>?? (5 samples, 2.35%)</title><rect x="91.0798%" y="197" width="2.3474%" height="15" fill="rgb(205,98,50)" fg:x="194" fg:w="5"/><text x="91.3298%" y="207.50">??</text></g><g><title>?? (5 samples, 2.35%)</title><rect x="91.0798%" y="181" width="2.3474%" height="15" fill="rgb(205,185,37)" fg:x="194" fg:w="5"/><text x="91.3298%" y="191.50">??</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5 samples, 2.35%)</title><rect x="91.0798%" y="165" width="2.3474%" height="15" fill="rgb(238,207,15)" fg:x="194" fg:w="5"/><text x="91.3298%" y="175.50">&lt;..</text></g><g><title>?? (5 samples, 2.35%)</title><rect x="91.0798%" y="149" width="2.3474%" height="15" fill="rgb(213,199,42)" fg:x="194" fg:w="5"/><text x="91.3298%" y="159.50">??</text></g><g><title>alloc::alloc::alloc_zeroed (5 samples, 2.35%)</title><rect x="91.0798%" y="133" width="2.3474%" height="15" fill="rgb(235,201,11)" fg:x="194" fg:w="5"/><text x="91.3298%" y="143.50">a..</text></g><g><title>__rust_alloc_zeroed (1 samples, 0.47%)</title><rect x="92.9577%" y="117" width="0.4695%" height="15" fill="rgb(207,46,11)" fg:x="198" fg:w="1"/><text x="93.2077%" y="127.50"></text></g><g><title>log::max_level (3 samples, 1.41%)</title><rect x="93.4272%" y="293" width="1.4085%" height="15" fill="rgb(241,35,35)" fg:x="199" fg:w="3"/><text x="93.6772%" y="303.50"></text></g><g><title>?? (3 samples, 1.41%)</title><rect x="93.4272%" y="277" width="1.4085%" height="15" fill="rgb(243,32,47)" fg:x="199" fg:w="3"/><text x="93.6772%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 1.41%)</title><rect x="93.4272%" y="261" width="1.4085%" height="15" fill="rgb(247,202,23)" fg:x="199" fg:w="3"/><text x="93.6772%" y="271.50"></text></g><g><title>psx_rs::emu::cpu::dispatch_instruction (40 samples, 18.78%)</title><rect x="76.5258%" y="325" width="18.7793%" height="15" fill="rgb(219,102,11)" fg:x="163" fg:w="40"/><text x="76.7758%" y="335.50">psx_rs::emu::cpu::dispatch_in..</text></g><g><title>psx_rs::emu::cpu::op_sb (4 samples, 1.88%)</title><rect x="93.4272%" y="309" width="1.8779%" height="15" fill="rgb(243,110,44)" fg:x="199" fg:w="4"/><text x="93.6772%" y="319.50">p..</text></g><g><title>psx_rs::emu::cpu::dispatch_instruction (1 samples, 0.47%)</title><rect x="94.8357%" y="293" width="0.4695%" height="15" fill="rgb(222,74,54)" fg:x="202" fg:w="1"/><text x="95.0857%" y="303.50"></text></g><g><title>__libc_start_main (170 samples, 79.81%)</title><rect x="15.9624%" y="581" width="79.8122%" height="15" fill="rgb(216,99,12)" fg:x="34" fg:w="170"/><text x="16.2124%" y="591.50">__libc_start_main</text></g><g><title>main (170 samples, 79.81%)</title><rect x="15.9624%" y="565" width="79.8122%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="170"/><text x="16.2124%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (170 samples, 79.81%)</title><rect x="15.9624%" y="549" width="79.8122%" height="15" fill="rgb(217,163,10)" fg:x="34" fg:w="170"/><text x="16.2124%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (170 samples, 79.81%)</title><rect x="15.9624%" y="533" width="79.8122%" height="15" fill="rgb(213,25,53)" fg:x="34" fg:w="170"/><text x="16.2124%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (170 samples, 79.81%)</title><rect x="15.9624%" y="517" width="79.8122%" height="15" fill="rgb(252,105,26)" fg:x="34" fg:w="170"/><text x="16.2124%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (170 samples, 79.81%)</title><rect x="15.9624%" y="501" width="79.8122%" height="15" fill="rgb(220,39,43)" fg:x="34" fg:w="170"/><text x="16.2124%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (170 samples, 79.81%)</title><rect x="15.9624%" y="485" width="79.8122%" height="15" fill="rgb(229,68,48)" fg:x="34" fg:w="170"/><text x="16.2124%" y="495.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (170 samples, 79.81%)</title><rect x="15.9624%" y="469" width="79.8122%" height="15" fill="rgb(252,8,32)" fg:x="34" fg:w="170"/><text x="16.2124%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (170 samples, 79.81%)</title><rect x="15.9624%" y="453" width="79.8122%" height="15" fill="rgb(223,20,43)" fg:x="34" fg:w="170"/><text x="16.2124%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (170 samples, 79.81%)</title><rect x="15.9624%" y="437" width="79.8122%" height="15" fill="rgb(229,81,49)" fg:x="34" fg:w="170"/><text x="16.2124%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (170 samples, 79.81%)</title><rect x="15.9624%" y="421" width="79.8122%" height="15" fill="rgb(236,28,36)" fg:x="34" fg:w="170"/><text x="16.2124%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (170 samples, 79.81%)</title><rect x="15.9624%" y="405" width="79.8122%" height="15" fill="rgb(249,185,26)" fg:x="34" fg:w="170"/><text x="16.2124%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (170 samples, 79.81%)</title><rect x="15.9624%" y="389" width="79.8122%" height="15" fill="rgb(249,174,33)" fg:x="34" fg:w="170"/><text x="16.2124%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (170 samples, 79.81%)</title><rect x="15.9624%" y="373" width="79.8122%" height="15" fill="rgb(233,201,37)" fg:x="34" fg:w="170"/><text x="16.2124%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>psx_rs::main (170 samples, 79.81%)</title><rect x="15.9624%" y="357" width="79.8122%" height="15" fill="rgb(221,78,26)" fg:x="34" fg:w="170"/><text x="16.2124%" y="367.50">psx_rs::main</text></g><g><title>psx_rs::Context::run (170 samples, 79.81%)</title><rect x="15.9624%" y="341" width="79.8122%" height="15" fill="rgb(250,127,30)" fg:x="34" fg:w="170"/><text x="16.2124%" y="351.50">psx_rs::Context::run</text></g><g><title>psx_rs::emu::cpu::op_sltu (1 samples, 0.47%)</title><rect x="95.3052%" y="325" width="0.4695%" height="15" fill="rgb(230,49,44)" fg:x="203" fg:w="1"/><text x="95.5552%" y="335.50"></text></g><g><title>psx_rs::emu::cpu::op_sltu (1 samples, 0.47%)</title><rect x="95.3052%" y="309" width="0.4695%" height="15" fill="rgb(229,67,23)" fg:x="203" fg:w="1"/><text x="95.5552%" y="319.50"></text></g><g><title>_start (176 samples, 82.63%)</title><rect x="13.6150%" y="597" width="82.6291%" height="15" fill="rgb(249,83,47)" fg:x="29" fg:w="176"/><text x="13.8650%" y="607.50">_start</text></g><g><title>_dl_start (1 samples, 0.47%)</title><rect x="95.7746%" y="581" width="0.4695%" height="15" fill="rgb(215,43,3)" fg:x="204" fg:w="1"/><text x="96.0246%" y="591.50"></text></g><g><title>_dl_start_final (1 samples, 0.47%)</title><rect x="95.7746%" y="565" width="0.4695%" height="15" fill="rgb(238,154,13)" fg:x="204" fg:w="1"/><text x="96.0246%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.47%)</title><rect x="95.7746%" y="549" width="0.4695%" height="15" fill="rgb(219,56,2)" fg:x="204" fg:w="1"/><text x="96.0246%" y="559.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.47%)</title><rect x="95.7746%" y="533" width="0.4695%" height="15" fill="rgb(233,0,4)" fg:x="204" fg:w="1"/><text x="96.0246%" y="543.50"></text></g><g><title>iset::bitvec::BitVec::push (2 samples, 0.94%)</title><rect x="96.2441%" y="597" width="0.9390%" height="15" fill="rgb(235,30,7)" fg:x="205" fg:w="2"/><text x="96.4941%" y="607.50"></text></g><g><title>iset::iter::ActionStack::new (1 samples, 0.47%)</title><rect x="97.1831%" y="597" width="0.4695%" height="15" fill="rgb(250,79,13)" fg:x="207" fg:w="1"/><text x="97.4331%" y="607.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="97.1831%" y="581" width="0.4695%" height="15" fill="rgb(211,146,34)" fg:x="207" fg:w="1"/><text x="97.4331%" y="591.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.47%)</title><rect x="97.1831%" y="565" width="0.4695%" height="15" fill="rgb(228,22,38)" fg:x="207" fg:w="1"/><text x="97.4331%" y="575.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.47%)</title><rect x="97.1831%" y="549" width="0.4695%" height="15" fill="rgb(235,168,5)" fg:x="207" fg:w="1"/><text x="97.4331%" y="559.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="97.1831%" y="533" width="0.4695%" height="15" fill="rgb(221,155,16)" fg:x="207" fg:w="1"/><text x="97.4331%" y="543.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="97.1831%" y="517" width="0.4695%" height="15" fill="rgb(215,215,53)" fg:x="207" fg:w="1"/><text x="97.4331%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.47%)</title><rect x="97.1831%" y="501" width="0.4695%" height="15" fill="rgb(223,4,10)" fg:x="207" fg:w="1"/><text x="97.4331%" y="511.50"></text></g><g><title>?? (1 samples, 0.47%)</title><rect x="97.1831%" y="485" width="0.4695%" height="15" fill="rgb(234,103,6)" fg:x="207" fg:w="1"/><text x="97.4331%" y="495.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.47%)</title><rect x="97.1831%" y="469" width="0.4695%" height="15" fill="rgb(227,97,0)" fg:x="207" fg:w="1"/><text x="97.4331%" y="479.50"></text></g><g><title>&lt;iset::iter::Iter&lt;T,V,R,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="97.6526%" y="581" width="0.4695%" height="15" fill="rgb(234,150,53)" fg:x="208" fg:w="1"/><text x="97.9026%" y="591.50"></text></g><g><title>pretty_env_logger::MAX_MODULE_WIDTH (3 samples, 1.41%)</title><rect x="97.6526%" y="597" width="1.4085%" height="15" fill="rgb(228,201,54)" fg:x="208" fg:w="3"/><text x="97.9026%" y="607.50"></text></g><g><title>_int_free (2 samples, 0.94%)</title><rect x="98.1221%" y="581" width="0.9390%" height="15" fill="rgb(222,22,37)" fg:x="209" fg:w="2"/><text x="98.3721%" y="591.50"></text></g><g><title>psx_rs::Context::new (1 samples, 0.47%)</title><rect x="99.0610%" y="597" width="0.4695%" height="15" fill="rgb(237,53,32)" fg:x="211" fg:w="1"/><text x="99.3110%" y="607.50"></text></g><g><title>all (213 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="213"/><text x="0.2500%" y="639.50"></text></g><g><title>psx-rs (213 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="213"/><text x="0.2500%" y="623.50">psx-rs</text></g><g><title>psx_rs::emu::map::get_region (1 samples, 0.47%)</title><rect x="99.5305%" y="597" width="0.4695%" height="15" fill="rgb(241,220,44)" fg:x="212" fg:w="1"/><text x="99.7805%" y="607.50"></text></g></svg></svg>